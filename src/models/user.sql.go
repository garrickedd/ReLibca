// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package models

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
insert into users(
    FullName,
    UserName,
    Password,
    PhoneNumber,
    Role,
    IsActive,
    CreatedAt,
    ModifiedAt
) values (
    $1, $2, $3, $4, $5, $6, $7, $8
) returning id, fullname, username, password, phonenumber, role, isactive, createdat, modifiedat
`

type CreateUserParams struct {
	Fullname    string       `json:"fullname"`
	Username    string       `json:"username"`
	Password    string       `json:"password"`
	Phonenumber string       `json:"phonenumber"`
	Role        int32        `json:"role"`
	Isactive    bool         `json:"isactive"`
	Createdat   time.Time    `json:"createdat"`
	Modifiedat  sql.NullTime `json:"modifiedat"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Fullname,
		arg.Username,
		arg.Password,
		arg.Phonenumber,
		arg.Role,
		arg.Isactive,
		arg.Createdat,
		arg.Modifiedat,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Username,
		&i.Password,
		&i.Phonenumber,
		&i.Role,
		&i.Isactive,
		&i.Createdat,
		&i.Modifiedat,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
delete from users
where Id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserById = `-- name: GetUserById :one
select id, fullname, username, password, phonenumber, role, isactive, createdat, modifiedat from users
where Id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Username,
		&i.Password,
		&i.Phonenumber,
		&i.Role,
		&i.Isactive,
		&i.Createdat,
		&i.Modifiedat,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
select id, fullname, username, password, phonenumber, role, isactive, createdat, modifiedat from users
order by Id
limit $1
offset $2
`

func (q *Queries) ListUsers(ctx context.Context, limit int32, offset int32) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, limit, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Fullname,
			&i.Username,
			&i.Password,
			&i.Phonenumber,
			&i.Role,
			&i.Isactive,
			&i.Createdat,
			&i.Modifiedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setActiveStatus = `-- name: SetActiveStatus :one
update users
set IsActive = $2, ModifiedAt = current_timestamp
where Id = $1
returning id, fullname, username, password, phonenumber, role, isactive, createdat, modifiedat
`

func (q *Queries) SetActiveStatus(ctx context.Context, iD uuid.UUID, isactive bool) (User, error) {
	row := q.db.QueryRowContext(ctx, setActiveStatus, iD, isactive)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Username,
		&i.Password,
		&i.Phonenumber,
		&i.Role,
		&i.Isactive,
		&i.Createdat,
		&i.Modifiedat,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
update users
set
FullName = coalesce($1, FullName),
Password = coalesce($2, Password),
PhoneNumber = coalesce($3, PhoneNumber)
where Id = $4
returning id, fullname, username, password, phonenumber, role, isactive, createdat, modifiedat
`

func (q *Queries) UpdateUser(ctx context.Context, fullName sql.NullString, password sql.NullString, phoneNumber sql.NullString, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		fullName,
		password,
		phoneNumber,
		id,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Fullname,
		&i.Username,
		&i.Password,
		&i.Phonenumber,
		&i.Role,
		&i.Isactive,
		&i.Createdat,
		&i.Modifiedat,
	)
	return i, err
}
