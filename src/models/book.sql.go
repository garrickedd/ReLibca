// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: book.sql

package models

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addBook = `-- name: AddBook :one
insert into Books(
    Id,
    Name,
    Author,
    Place,
    CreatedAt,
    ModifiedAt,
    CategoryId
) values (
    default, $1, $2, $3, default, null, $4
) returning id, name, author, place, createdat, modifiedat, categoryid
`

func (q *Queries) AddBook(ctx context.Context, name string, author sql.NullString, place sql.NullString, categoryid uuid.NullUUID) (Book, error) {
	row := q.db.QueryRowContext(ctx, addBook,
		name,
		author,
		place,
		categoryid,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Author,
		&i.Place,
		&i.Createdat,
		&i.Modifiedat,
		&i.Categoryid,
	)
	return i, err
}

const listBooks = `-- name: ListBooks :many
select 
    Books.Id,
    Books.Name,
    Books.Author,
    Books.Place,
    Categories.Name as CategoryName
from
    Books
left join
    Categories on Books.CategoryId = Categories.Id
where
    $1 is null or Books.Name ilike '%' || $1 || '%'
order by Books.CreatedAt desc
`

type ListBooksRow struct {
	ID           uuid.UUID      `json:"id"`
	Name         string         `json:"name"`
	Author       sql.NullString `json:"author"`
	Place        sql.NullString `json:"place"`
	Categoryname sql.NullString `json:"categoryname"`
}

func (q *Queries) ListBooks(ctx context.Context, dollar_1 interface{}) ([]ListBooksRow, error) {
	rows, err := q.db.QueryContext(ctx, listBooks, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBooksRow
	for rows.Next() {
		var i ListBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Author,
			&i.Place,
			&i.Categoryname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
